{"remainingRequest":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Практика\\Vue practice\\vue-pannellum-interface\\src\\components\\EditorMenu.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\src\\components\\EditorMenu.vue","mtime":1623116806223},{"path":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KZmllbGRzZXQgew0KICBwYWRkaW5nOiA1cHg7DQp9DQoNCg0KLnNwb3Qtc2VsZWN0ZWQgew0KICBib3JkZXItcmFkaXVzOiAyMCU7DQogIGFsaWduLXNlbGY6IGNlbnRlcjsNCiAganVzdGlmeS1zZWxmOiBjZW50ZXI7DQp9DQoNCg0KDQojc3luY3JvbmlzZS1idG4sICAjbG9hZC1wYW5vLWJ0biB7DQogICB3aWR0aDogNTAlOw0KICAgbWFyZ2luLXRvcDogMTBweDsNCiAgIG1hcmdpbi1ib3R0b206IDEwcHg7DQp9DQo="},{"version":3,"sources":["EditorMenu.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmLA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA","file":"EditorMenu.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div id='menu'>\r\n        <fieldset>\r\n          <legend>Текущая панорама</legend>\r\n          <PanoramaSelector\r\n          :scenes='scenes'\r\n          :baseOptionText='\"Выберите текущую панораму\"'\r\n          @sceneChanged='currentSceneChanged'></PanoramaSelector>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Редактор панорамы</legend>\r\n            <v-checkbox v-model='panoramaIsEditing'\r\n            label='Панорама редактируется'\r\n            :disabled='!currentSceneSelected'\r\n            @change='editingModeChanged()'>\r\n            </v-checkbox>\r\n            <v-btn \r\n            :disabled='!panoramaIsEditing'\r\n            rounded\r\n            @click='getCenterClicked()'>Координаты центра</v-btn>\r\n            <v-select v-model='spotType'\r\n              :disabled='isInputDisabled'\r\n              :items='spotTypes'\r\n              item-text='text'\r\n              item-value='value'\r\n              label='Выберите тип метки'>\r\n            </v-select>\r\n            <PanoramaSelector  \r\n              :disabilityCondition='isTransitSceneDisabeled'\r\n              :scenes='scenes' \r\n              :baseOptionText='\"Выберите панораму для перехода\"'\r\n              @sceneChanged='transitionSceneChanged'></PanoramaSelector>\r\n          <v-text-field label='Вертикаль' v-model='controller.pitch' :disabled='isInputDisabled'></v-text-field>\r\n          <v-text-field label='Горизонталь' v-model='controller.yaw' :disabled='isInputDisabled'></v-text-field>\r\n          <v-text-field label='Описание' v-model='controller.text' :disabled='isInputDisabled'></v-text-field>\r\n          <v-row justify=\"center\">\r\n            <v-chip color='green' class='spot-selected' outlined v-show='controller.currentSpot != undefined'> {{ getCurrentSpotText() }}</v-chip>\r\n          </v-row>\r\n          <v-container>\r\n            <v-row justify=\"space-around\">\r\n              <v-btn :disabled='isButtonDisabled' @click='addHotSpot' rounded>Добавить метку</v-btn>\r\n              <v-btn :disabled='isSpotEditButtonDisabled' @click='deleteHotSpot' rounded>Удалить метку</v-btn>\r\n              <v-btn :disabled='isSpotEditButtonDisabled' @click='moveHotSpot' rounded>Переместить метку</v-btn>\r\n            </v-row>\r\n            <v-row  justify='center'>\r\n              <v-btn :disabled='true' id='syncronise-btn' rounded>Синхронизировать</v-btn>\r\n              <UploadImages id='pano-load-btn' @change='handleImages' uploadMsg='Нажмите, чтобы загрузить или перетяните сюда панорамы.'/>\r\n            </v-row>\r\n          </v-container>\r\n        </fieldset>\r\n      </div>\r\n</template>\r\n\r\n<script>\r\nimport PanoramaSelector from '@/components/PanoramaSelector';\r\nimport UploadImages from \"vue-upload-drop-images\"\r\n\r\nlet panoramas = [\r\n  {\r\n    path: 'panoramas/2.jpg',\r\n    title: 'Доска'\r\n  },\r\n  {\r\n    path: 'panoramas/1.jpg',\r\n    title: 'Середина комнаты'\r\n  } \r\n]\r\n\r\nexport default {\r\n    name: 'EditorMenu',\r\n    props: ['controller'],\r\n    components: {\r\n      PanoramaSelector,\r\n      UploadImages\r\n    },\r\n    data() {\r\n      return {\r\n        scenes: [],\r\n        currentScene: undefined,\r\n        transitionScene: undefined,\r\n        panoramaIsEditing: false,\r\n        spotTypes: [\r\n          {\r\n            value: 'info',\r\n            text: 'Информационная'\r\n          },\r\n          {\r\n            value: 'scene',\r\n            text: 'Переход'\r\n          }\r\n        ],\r\n        spotType: 'info',\r\n    }\r\n  },\r\n  created() {\r\n    for (let i = 0; i < panoramas.length; i++) {\r\n      this.scenes.push({\r\n        id: i,\r\n        path: panoramas[i].path,\r\n        title: panoramas[i].title\r\n      })\r\n    }\r\n  },\r\n  computed: {\r\n    isInputDisabled() {\r\n      return !this.panoramaIsEditing;\r\n    },\r\n    isButtonDisabled() {\r\n      let isPitchAcceptable = \r\n         parseFloat(this.controller.pitch) <= 180 &&\r\n         parseFloat(this.controller.pitch) >= -180;\r\n      let isYawAcceptable = \r\n         parseFloat(this.controller.yaw) <= 90 &&\r\n         parseFloat(this.controller.yaw) >= -90;\r\n      let isDescriptionAcceptaple = this.controller.text != '';\r\n      let isTransitionSceneChosen = this.spotType == 'scene' && this.transitionScene != undefined || this.spotType == 'info';\r\n      return !(isPitchAcceptable && isYawAcceptable && isDescriptionAcceptaple && isTransitionSceneChosen && this.panoramaIsEditing);\r\n    },\r\n    isSpotEditButtonDisabled() {\r\n      return !(!this.isButtonDisabled && (this.controller.currentSpot != undefined));\r\n    },\r\n    currentSceneSelected() {\r\n      return this.currentScene != undefined;\r\n    },\r\n    isTransitSceneDisabeled() {\r\n      return !this.panoramaIsEditing || this.spotType != 'scene' || this.spotType == undefined; \r\n    }\r\n  },\r\n  \r\n  methods: {\r\n    currentSceneChanged(scene) {\r\n      this.currentScene = scene;\r\n      this.controller.loadScene(this.currentScene);\r\n      this.controller.setHomeScenePath(this.currentScene);\r\n    },\r\n    getCurrentSpotText() {\r\n      return this.controller.currentSpot ? 'Выбрана точка: ' + this.controller.currentSpot.text : undefined;\r\n    },\r\n    transitionSceneChanged(scene) {\r\n      this.transitionScene = scene;\r\n    },\r\n    editingModeChanged() {\r\n      this.controller.setEditingMode(this.panoramaIsEditing);\r\n      this.controller.displayCross();\r\n    },\r\n    getCenterClicked() {\r\n      this.controller.setCenterPosition();\r\n    },\r\n    addHotSpot() {\r\n      this.controller.addHotSpot(\r\n        this.spotType, undefined, this.transitionScene);\r\n    },\r\n    deleteHotSpot() {\r\n      this.controller.removeHotSpot();\r\n    },\r\n    moveHotSpot() {\r\n      this.controller.moveHotSpot();\r\n    },\r\n    handleImages(files) {\r\n      files.forEach(file => {\r\n        if (file.type === 'text/html' ||\r\n            file.type === 'text/css' ||\r\n            file.type === 'text/javascript')\r\n        return;\r\n\r\n        let name = file.name.split('.')[0];\r\n        let url = URL.createObjectURL(file)\r\n\r\n        this.scenes.push({\r\n          path: url,\r\n          title: name\r\n        })\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\nfieldset {\r\n  padding: 5px;\r\n}\r\n\r\n\r\n.spot-selected {\r\n  border-radius: 20%;\r\n  align-self: center;\r\n  justify-self: center;\r\n}\r\n\r\n\r\n\r\n#syncronise-btn,  #load-pano-btn {\r\n   width: 50%;\r\n   margin-top: 10px;\r\n   margin-bottom: 10px;\r\n}\r\n</style>"]}]}