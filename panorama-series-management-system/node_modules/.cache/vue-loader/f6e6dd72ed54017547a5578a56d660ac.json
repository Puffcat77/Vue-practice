{"remainingRequest":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\vue-pannellum\\src\\vue-pannellum.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\vue-pannellum\\src\\vue-pannellum.vue","mtime":499162500000},{"path":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Практика\\Vue practice\\vue-pannellum-interface\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5wbmxtLXVpIC5wbmxtLWFib3V0LW1zZyB7CiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50Owp9CgoucG5sbS11aSAucG5sbS1vcmllbnRhdGlvbi1idXR0b24gewogIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["vue-pannellum.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgNA;AACA;AACA;;AAEA;AACA;AACA","file":"vue-pannellum.vue","sourceRoot":"node_modules/vue-pannellum/src","sourcesContent":["<!--Panorama viewer pannellum wrap.-->\n<template>\n  <div\n    class=\"vue-pannellum\"\n    @mouseup=\"onMouseUp\"\n    @touchmove=\"onTouchMove\"\n    @touchend=\"onTouchEnd\"\n  >\n    <div class=\"info\">{{ info }}</div>\n    <div class=\"default-slot\">\n      <slot/>\n    </div>\n  </div>\n</template>\n\n<script>\nimport 'pannellum'\nimport 'pannellum/build/pannellum.css'\n\nimport _debounce from 'lodash.debounce'\n\nexport default {\n  props: {\n    debug: { type: Boolean, default: false },\n    src: { type: [String, Object], required: true },\n    preview: { type: String, default: '' },\n    autoLoad: { type: Boolean, default: true },\n    autoRotate: { type: [Number, Boolean], default: 0 },\n    orientation: { type: Boolean, default: false },\n    draggable: { type: Boolean, default: true },\n    mouseZoom: { type: Boolean, default: true },\n    doubleClickZoom: { type: Boolean, default: true },\n    showInfo: { type: Boolean, default: false },\n    showZoom: { type: Boolean, default: false },\n    showFullscreen: { type: Boolean, default: false },\n    compass: { type: Boolean, default: false },\n    hotSpots: { type: Array, default: () => [] },\n    hfov: { type: Number, default: 75 },\n    minHfov: { type: Number, default: 30 },\n    maxHfov: { type: Number, default: 120 },\n    yaw: { type: Number, default: 0 },\n    pitch: { type: Number, default: 0 },\n  },\n  data () {\n    return {\n      viewer: null,\n      info: '',\n      rafId: -1,\n    }\n  },\n  computed: {\n    srcOption () {\n      if (typeof this.src === 'string') {\n        return {\n          type: 'equirectangular',\n          panorama: this.src,\n          hotSpots: this.hotSpots,\n        }\n      } else if (typeof this.src === 'object') {\n        if (this.src.px && this.src.ny) {\n          return {\n            type: 'cubemap',\n            cubeMap: [\n              this.src.pz,\n              this.src.px,\n              this.src.nz,\n              this.src.nx,\n              this.src.py,\n              this.src.ny,\n            ],\n            hotSpots: this.hotSpots,\n          }\n        } else if (this.src.scenes) {\n          return {\n            default: this.src.default,\n            scenes: this.src.scenes,\n          }\n        } else {\n          console.error('[vue-pannellum] Unknown src type')\n        }\n      } else {\n        console.error('[vue-pannellum] Unknown src type: ' + typeof this.src)\n      }\n    },\n  },\n  watch: {\n    src (val) {\n      this.$el.innerHTML = ''\n      this.$nextTick(this.load)\n    },\n    hfov (val) {\n      if (this.viewer) this.viewer.setHfov(val, false)\n    },\n    yaw (val) {\n      if (this.viewer) this.viewer.setYaw(val, false)\n    },\n    pitch (val) {\n      if (this.viewer) this.viewer.setPitch(val, false)\n    },\n    maxHfov (val) {\n      if (this.viewer) {\n        this.viewer.setHfovBounds([this.minHfov, this.maxHfov])\n      }\n    },\n    minHfov (val) {\n      if (this.viewer) {\n        this.viewer.setHfovBounds([this.minHfov, this.maxHfov])\n      }\n    },\n    autoRotate (val) {\n      if (val) {\n        this.viewer.startAutoRotate()\n      } else {\n        this.viewer.stopAutoRotate()\n        if (this.orientation) this.viewer.startOrientation()\n      }\n    },\n    orientation (val) {\n      if (val) {\n        this.viewer.startOrientation()\n      } else {\n        this.viewer.stopOrientation()\n        if (this.autoRotate) this.viewer.startAutoRotate()\n      }\n    },\n  },\n  mounted () {\n    this.load()\n    this.rafId = window.requestAnimationFrame(this.loop)\n  },\n  beforeDestroy() {\n    this.viewer.destroy()\n    window.cancelAnimationFrame(this.rafId)\n  },\n  methods: {\n    load () {\n      let options = {\n        autoLoad: this.autoLoad,\n        autoRotate: this.autoRotate === true ? -2 : 0,\n        orientationOnByDefault: this.orientation,\n        draggable: this.draggable,\n        mouseZoom: this.mouseZoom,\n        doubleClickZoom: this.doubleClickZoom,\n        compass: this.compass,\n        preview: this.preview,\n        hfov: this.hfov,\n        yaw: this.yaw,\n        pitch: this.pitch,\n        minHfov: this.minHfov,\n        maxHfov: this.maxHfov,\n        // haov: 149.87,\n        // vaov: 54.15,\n        ...this.srcOption,\n      }\n      // console.log('options', options)\n      this.viewer = window.pannellum.viewer(this.$el, options)\n      this.viewer.on('load', () => {\n        this.$emit('load')\n      })\n      this.viewer.on('error', (err) => {\n        this.$emit('error', err)\n      })\n      if (this.showInfo === false) {\n        let el = this.$el.querySelector('.pnlm-panorama-info')\n        // Note: Using display will not work when in tour mode and switch scene\n        if (el) el.style.visibility = 'hidden'\n      }\n      if (this.showZoom === false) {\n        let el = this.$el.querySelector('.pnlm-zoom-controls')\n        if (el) el.style.display = 'none'\n      }\n      if (this.showFullscreen === false) {\n        let el = this.$el.querySelector('.pnlm-fullscreen-toggle-button')\n        if (el) el.style.display = 'none'\n      }\n    },\n    loop () {\n      this.rafId = window.requestAnimationFrame(this.loop)\n      let hfov = this.viewer.getHfov()\n      let yaw = this.viewer.getYaw()\n      let pitch = this.viewer.getPitch()\n      if (pitch > 90) pitch = 90\n      else if (pitch < -90) pitch = -90\n      if (hfov != this.hfov) this.$emit('update:hfov', hfov)\n      if (yaw != this.yaw) this.$emit('update:yaw', yaw)\n      if (pitch != this.pitch) this.$emit('update:pitch', pitch)\n    },\n    onMouseUp () {\n      if (this.debug) this.info += ' mu'\n      this.debounceRotate()\n    },\n    onTouchMove () {\n      if (this.debug) this.info += ' tm'\n    },\n    onTouchEnd () {\n      if (this.debug) this.info += ' te'\n      this.debounceRotate()\n    },\n    debounceRotate: _debounce(function () {\n      // priority of orientation is higher\n      if (this.orientation) this.viewer.startOrientation()\n      else if (this.autoRotate) this.viewer.startAutoRotate()\n    }, 3000),\n  },\n}\n</script>\n\n<style>\n.pnlm-ui .pnlm-about-msg {\n  display: none !important;\n}\n\n.pnlm-ui .pnlm-orientation-button {\n  display: none !important;\n}\n</style>\n\n<style scoped>\n.vue-pannellum {\n  position: relative;\n}\n\n.info {\n  position: absolute;\n  background-color: hsla(0, 0%, 100%, 0.5);\n  top: 0;\n  left: 0;\n  width: 100%;\n  z-index: 2;\n}\n\n.default-slot {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  z-index: 2;\n}\n</style>\n"]}]}